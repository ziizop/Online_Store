Йоба:
я вот делал, у меня так было:

class Category(MPTTModel):
    name = models.CharField(max_length=200, db_index=True)
    slug = models.SlugField(max_length=200, db_index=True, unique=True)
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')

    class Meta:
        ordering = ['name']
        verbose_name = 'Category/Категория'
        verbose_name_plural = 'Categories/Категории'

    class MPTTMeta:
        order_insertion_by = ['name']

    def _str_(self):
        return self.name

    def get_group_count(self):
        category = self.get_descendants(include_self=True)
        return Product.objects.filter(category__in=category).count()

    def image(self):
        category = self.get_descendants(include_self=True)
        first_product = Product.objects.filter(category__in=category).first()
        print(first_product)
        if first_product is not None:
            return first_product.image_thumbnail
        else:
            return None

    def path(self):
        return self.get_ancestors()

вот модель продукта:

class Product(models.Model):
    # category = models.ForeignKey(Category, related_name='products', verbose_name="Category/Категория",
    #                              on_delete=models.DO_NOTHING)
    category = TreeForeignKey(Category, on_delete=models.CASCADE, null=True, blank=True,
                              related_name='products', verbose_name="Category/Категория")
    name = models.CharField(max_length=200, db_index=True, verbose_name="Name/Имя")
блаблабла



# в views.py 
Йоба:
а сам фильтр вот как выглядит примерно:
вот так берешь все подкатегории с категорией:
product_categories = Category.objects.filter(slug=category_slug).get_descendants(include_self=True)
а вот так потом все продукты ищешь, т.е. все продукты, у которых категория равна заглавной и ее дочерних подкатегорий всех:
queryset = Product.objects.filter(category_in=product_categories, stock_gt=0)




вот тебе могу помочь, вот так превьюшку картинки вставлять, это метод в модели
    def image_img(self):
        if self.image:
            from django.utils.safestring import mark_safe
            return mark_safe(u'<a href="{0}" target="_blank"><img src="{0}" width="100"/></a>'.format(self.image.url))
        else:
            return '(No image/Нет изображения)'
потом в админке добавляешь его как:
readonly_fields = ['image_img', ]





# для изменения стилистики админки и добавлениия кнопок django suit прописывается в админк 
инструкция по настройки в admin.py https://www.youtube.com/watch?v=_qJgGy8J-5M&t=1233s с 32:10 смотреть !!